import { AIProcessor } from '../../ai/AIProcessor.js';
import type { ProjectContext } from '../../ai/types';
import type { DocumentProcessor, DocumentOutput } from '../../documentGenerator/types';
import { StakeholderAnalysisTemplate } from './StakeholderAnalysisTemplate.js';

/**
 * Processor for the Stakeholder Analysis & Communication Plan document.
 * Generates comprehensive stakeholder analysis and communication strategies for PPPM context.
 */
export class StakeholderAnalysisProcessor implements DocumentProcessor {
  private aiProcessor: AIProcessor;

  constructor() {
    this.aiProcessor = AIProcessor.getInstance();
  }

  /**
   * Detects [AI_SYNTHESIS: ...] tags and generates text for each, replacing the tag with AI-generated content.
   */
  private async synthesizeSectionContent(sectionContent: string, context: ProjectContext): Promise<string> {
    const synthesisRegex = /\[AI_SYNTHESIS:([^\]]+)\]/g;
    let result = sectionContent;
    let match;
    
    while ((match = synthesisRegex.exec(sectionContent)) !== null) {
      const prompt = match[1].trim();
      
      // Use AIProcessor to generate content for the prompt
      const aiContent = await this.aiProcessor.makeAICall([
        { 
          role: 'system', 
          content: `You are a Senior Stakeholder Management Expert and PPPM (Project, Program, Portfolio Management) specialist. You excel at stakeholder analysis, communication planning, and engagement strategy development. Create detailed, actionable content that follows PMBOK 7.0 stakeholder management best practices.` 
        },
        { 
          role: 'user', 
          content: `Project Context:
- Project Name: ${context.projectName || 'Project'}
- Description: ${context.description || 'No description provided'}
- Additional Context: ${JSON.stringify(context, null, 2)}

Task: ${prompt}

Requirements:
- Provide specific, actionable recommendations
- Use professional project management terminology
- Include measurable success criteria where applicable
- Consider both internal and external stakeholders
- Align with PMBOK 7.0 stakeholder management principles
- Format output as clear, well-structured markdown content` 
        }
      ]).then(res => typeof res === 'string' ? res : res.content);
      
      result = result.replace(match[0], aiContent);
    }
    
    return result;
  }

  /**
   * Process the stakeholder analysis document generation
   */
  async process(context: ProjectContext): Promise<DocumentOutput> {
    try {
      // Generate content using template structure
      const sections = StakeholderAnalysisTemplate.getSections(context);
      let content = `# ${StakeholderAnalysisTemplate.title}\n\n`;
      
      // Add document header with metadata
      const generatedDate = new Date().toISOString().split('T')[0];
      content += `**Generated by ADPA Enterprise Framework v3.2.0**  \n`;
      content += `**Category:** pppm  \n`;
      content += `**Generated:** ${new Date().toISOString()}  \n`;
      content += `**Description:** Stakeholder Analysis & Communication Plan for PPPM\n\n`;
      content += `---\n\n`;
      
      // Process each section with AI synthesis
      for (const section of sections) {
        const synthesizedContent = await this.synthesizeSectionContent(section.content, context);
        content += `## ${section.title}\n\n${synthesizedContent}\n\n`;
      }
      
      // Add document footer
      content += `---\n\n`;
      content += `**Document Version:** 1.0  \n`;
      content += `**Date:** ${generatedDate}  \n`;
      content += `**Prepared by:** ADPA Enterprise Framework  \n`;
      content += `**Next Review:** [To be scheduled]\n\n`;
      content += `---\n\n`;
      content += `*Built with ❤️ for enterprise-grade stakeholder management and PPPM excellence.*\n`;
      
      return {
        title: StakeholderAnalysisTemplate.title,
        content
      };
    } catch (error) {
      console.error('Error processing Stakeholder Analysis document:', error);
      throw new Error(`Failed to generate Stakeholder Analysis & Communication Plan: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Validate the generated output for completeness and quality
   */
  private async validateOutput(content: string): Promise<void> {
    const requiredSections = [
      'Stakeholder Analysis Matrix',
      'Communication Plan',
      'Stakeholder Engagement Activities'
    ];
    
    for (let i = 0; i < requiredSections.length; i++) {
      const section = requiredSections[i];
      if (content.indexOf(section) === -1) {
        throw new Error(`Required section missing: ${section}`);
      }
    }
    
    // Check for minimum content length
    if (content.length < 1000) {
      throw new Error('Generated content is too short - may be incomplete');
    }
    
    // Check for remaining synthesis tags (should all be processed)
    if (content.indexOf('[AI_SYNTHESIS:') !== -1) {
      throw new Error('Document contains unprocessed AI_SYNTHESIS tags');
    }
  }
}