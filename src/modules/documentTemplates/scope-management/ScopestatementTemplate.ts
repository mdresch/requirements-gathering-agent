import type { ProjectContext } from '../../ai/types.js';

/**
 * Enhanced Template for the Project Scope Statement.
 * 
 * This template creates a comprehensive, PMBOK-compliant scope statement that:
 * - Synthesizes information from Business Case, User Stories, and project context
 * - Pre-populates scope boundaries based on AI analysis of available documents
 * - Provides educational scaffolding for organizational completion
 * - Includes intelligent placeholders for missing organizational data
 */
export class ScopestatementTemplate {
  constructor(private context: ProjectContext) {}

  generateContent(): string {
    return `# Project Scope Statement

**Generated by Requirements Gathering Agent v2.1.2**  
**Category:** scope-management  
**Generated:** ${new Date().toISOString()}  
**Description:** PMBOK Project Scope Statement - Enhanced with AI Synthesis

---

## AI SYNTHESIS INSTRUCTIONS

**You are tasked with creating a comprehensive Project Scope Statement by analyzing and synthesizing the following sources:**

### üìã **Primary Analysis Sources:**
1. **Business Case** - Extract business objectives, success criteria, and strategic rationale
2. **User Stories** - Identify functional requirements, user needs, and system interactions  
3. **User Personas** - Understand stakeholder needs and usage patterns
4. **Project Context** - Leverage README, project description, and technical specifications
5. **Requirements Documentation** - Any existing requirements or feature specifications

### üéØ **Synthesis Process:**
1. **Project Scope Description:** Synthesize a clear narrative of what the project will deliver
2. **Deliverables Analysis:** Extract tangible outputs from User Stories and Business Case
3. **Boundary Definition:** Determine what's in scope vs. out of scope based on context analysis
4. **Acceptance Criteria:** Derive measurable completion criteria from business objectives
5. **Constraints & Assumptions:** Infer technical, business, and resource limitations

### üìê **Template Structure to Complete:**

---

## Document Purpose

This Project Scope Statement provides a comprehensive definition of project scope, deliverables, boundaries, and acceptance criteria. It serves as the foundational document for scope management and change control throughout the project lifecycle.

**PMBOK Reference:** 5.3.3.1 - Project Scope Statement

---

## 1. Project Scope Description

**Instructions for AI:** Based on the Business Case and User Stories, create a comprehensive narrative describing what this project will accomplish. Focus on business value and outcomes.

### 1.1 Project Purpose and Justification
[AI: Extract from Business Case - Why is this project being undertaken?]

### 1.2 Product Scope Description  
[AI: Synthesize from User Stories and context - What product/service will be created?]

### 1.3 Project Objectives
[AI: Extract measurable objectives from Business Case and context]

---

## 2. Project Deliverables

**Instructions for AI:** Analyze User Stories, Business Case, and project context to identify all tangible deliverables.

### 2.1 Primary Deliverables
[AI: List main deliverables extracted from User Stories and Business Case]

### 2.2 Secondary Deliverables  
[AI: Identify supporting deliverables like documentation, training, etc.]

### 2.3 Deliverable Acceptance Criteria
[AI: For each deliverable, define measurable acceptance criteria]

---

## 3. Scope Boundaries

### 3.1 In Scope
**Instructions for AI:** Based on User Stories and Business Case analysis, clearly define what IS included in this project.

[AI: Create comprehensive list of included features, functions, and deliverables]

### 3.2 Explicit Exclusions (Out of Scope)
**Instructions for AI:** Based on context analysis, stakeholder expectations, and common scope creep patterns, define what is explicitly NOT included. Be specific and comprehensive to prevent misunderstandings.

#### 3.2.1 Functional Exclusions
[AI: List specific features, functions, or capabilities that are explicitly excluded]
- Features that might be expected but are not part of this project
- Related functionality that will be addressed in future phases
- Alternative approaches or solutions that were considered but rejected

#### 3.2.2 Technical Exclusions  
[AI: Define technical components, platforms, or integrations that are out of scope]
- Specific technologies, platforms, or tools not supported
- Legacy system integrations not included
- Performance requirements beyond specified thresholds
- Security features not implemented in this phase

#### 3.2.3 Business Process Exclusions
[AI: Identify business processes, workflows, or organizational changes not covered]
- Business process redesign or optimization
- Organizational change management activities
- Training programs beyond basic user documentation
- Policy or procedure development

#### 3.2.4 Data and Content Exclusions
[AI: Specify data migration, content creation, or information management tasks excluded]
- Historical data migration or cleanup
- Content creation or data entry services
- Data quality improvement initiatives
- Archive or backup system development

#### 3.2.5 Infrastructure and Environment Exclusions
[AI: Define infrastructure, hosting, or environment setup tasks not included]
- Hardware procurement or setup
- Network infrastructure changes
- Cloud environment provisioning (unless specified)
- Disaster recovery or backup system implementation

#### 3.2.6 Support and Maintenance Exclusions
[AI: Clarify ongoing support, maintenance, or operational activities not covered]
- 24/7 operational support
- Long-term maintenance contracts
- User training beyond initial handover
- Performance monitoring and optimization services

#### 3.2.7 Future Phase Exclusions
[AI: Identify features or capabilities planned for future releases]
- Enhancements planned for subsequent project phases
- Advanced features requiring additional research or development
- Integrations dependent on third-party roadmaps
- Scalability improvements beyond current requirements

### 3.3 Scope Clarifications
**Instructions for AI:** Address common areas of confusion or potential misinterpretation.

[AI: Provide clarifications on scope boundaries that might be ambiguous or commonly misunderstood]

---

## 4. Project Requirements

### 4.1 Functional Requirements
[AI: Extract from User Stories - What must the system do?]

### 4.2 Non-Functional Requirements
[AI: Infer from context - Performance, security, usability requirements]

### 4.3 Quality Requirements
[AI: Extract quality standards from Business Case and context]

---

## 5. Project Constraints

**Instructions for AI:** Analyze project context to identify likely constraints. Include intelligent placeholders for organizational constraints.

### 5.1 Technical Constraints
[AI: Infer from project context and technology stack]

### 5.2 Resource Constraints  
[PLACEHOLDER - Organizational Input Required]
- Budget: [TBD - Finance Department Input]
- Timeline: [TBD - Project Schedule Input]  
- Personnel: [TBD - HR/Resource Management Input]

### 5.3 Environmental Constraints
[AI: Infer from context - platform, integration, compliance requirements]

---

## 6. Project Assumptions

**Instructions for AI:** Based on project context and Business Case, identify key assumptions that underpin the project scope.

### 6.1 Technical Assumptions
[AI: Infer technical assumptions from project context]

### 6.2 Business Assumptions
[AI: Extract business assumptions from Business Case]

### 6.3 Resource Assumptions
[PLACEHOLDER - Organizational Input Required]
- Stakeholder availability: [TBD - Organizational Input]
- Resource allocation: [TBD - Resource Management Input]
- Decision-making authority: [TBD - Governance Input]

---

## 7. Success Criteria and Acceptance Criteria

### 7.1 Project Success Criteria
[AI: Extract from Business Case - How will project success be measured?]

### 7.2 Product Acceptance Criteria
[AI: Synthesize from User Stories - How will deliverables be accepted?]

---

## 8. Scope Exclusion Guidelines

**How to Identify and Document Exclusions:**

### 8.1 Exclusion Identification Process
1. **Stakeholder Expectation Analysis:** Review what stakeholders might reasonably expect but isn't included
2. **Related Feature Analysis:** Identify features commonly associated with your deliverables but not in scope
3. **Technology Boundary Analysis:** Define technical platforms, tools, or capabilities not supported
4. **Process Boundary Analysis:** Clarify business processes, training, or organizational changes not covered
5. **Timeline Boundary Analysis:** Identify features or capabilities deferred to future phases

### 8.2 Exclusion Documentation Best Practices
- **Be Specific:** Avoid vague exclusions; provide concrete examples
- **Explain Why:** When helpful, briefly explain why something is excluded (future phase, different team, etc.)
- **Use Positive Language:** Frame exclusions constructively rather than negatively
- **Group Logically:** Organize exclusions by category for easy reference
- **Review Regularly:** Update exclusions as project understanding evolves

### 8.3 Common Exclusion Categories to Consider
- **Functional:** Features, capabilities, or user workflows not implemented
- **Technical:** Platforms, integrations, or performance levels not supported
- **Business:** Process changes, training, or organizational development not included
- **Data:** Migration, cleanup, or content creation services not provided
- **Infrastructure:** Hardware, network, or environment setup not covered
- **Support:** Ongoing maintenance, monitoring, or operational support not included
- **Future:** Enhancements, optimizations, or expansions planned for later phases

---

## 9. Organizational Completion Instructions

**To Complete This Scope Statement:**

1. **Review AI-Generated Content:** Validate the scope boundaries, deliverables, and requirements extracted by AI
2. **Enhance Exclusions:** Review and expand the explicit exclusions based on stakeholder discussions
3. **Add Organizational Constraints:** Complete the resource, budget, and timeline constraint sections
4. **Validate Assumptions:** Confirm or modify the technical and business assumptions
5. **Stakeholder Review:** Have key stakeholders review and approve the scope boundaries, especially exclusions
6. **Integration Check:** Ensure alignment with Business Case and User Stories

**Recommended Next Steps:**
1. **Scope Validation Workshop:** Conduct stakeholder review of scope boundaries and exclusions
2. **Exclusion Communication:** Ensure all stakeholders understand and acknowledge the exclusions
3. **Work Breakdown Structure (WBS):** Use this scope statement to create detailed WBS
4. **Change Control Process:** Establish scope change management procedures that reference these exclusions

---

*This document was intelligently pre-populated by analyzing Business Case, User Stories, and project context. Please review, validate, and complete the organizational sections to ensure comprehensive scope definition.*
`;
  }
}
