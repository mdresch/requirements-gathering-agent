import { Router } from 'express';
import { ProjectDocumentController } from '../controllers/ProjectDocumentController.js';
import { body, param, query } from 'express-validator';

const router = Router();

// Validation middleware
const validateProjectId = [
  param('projectId').isMongoId().withMessage('Invalid project ID format')
];

const validateDocumentId = [
  param('id').isMongoId().withMessage('Invalid document ID format')
];

const validateCreateDocument = [
  body('projectId').isMongoId().withMessage('Invalid project ID format'),
  body('name').isString().trim().isLength({ min: 1, max: 200 }).withMessage('Name is required and must be 1-200 characters'),
  body('type').isString().trim().isLength({ min: 1, max: 100 }).withMessage('Type is required and must be 1-100 characters'),
  body('category').isString().trim().isLength({ min: 1, max: 100 }).withMessage('Category is required and must be 1-100 characters'),
  body('content').isString().withMessage('Content is required'),
  body('framework').isIn(['babok', 'pmbok', 'multi']).withMessage('Framework must be babok, pmbok, or multi'),
  body('status').optional().isIn(['draft', 'review', 'approved', 'published']).withMessage('Status must be draft, review, approved, or published'),
  body('qualityScore').optional().isInt({ min: 0, max: 100 }).withMessage('Quality score must be between 0 and 100'),
  body('tags').optional().isArray().withMessage('Tags must be an array'),
  body('generatedBy').optional().isString().trim().isLength({ max: 100 }).withMessage('Generated by must be 100 characters or less')
];

const validateUpdateDocument = [
  body('name').optional().isString().trim().isLength({ min: 1, max: 200 }).withMessage('Name must be 1-200 characters'),
  body('type').optional().isString().trim().isLength({ min: 1, max: 100 }).withMessage('Type must be 1-100 characters'),
  body('category').optional().isString().trim().isLength({ min: 1, max: 100 }).withMessage('Category must be 1-100 characters'),
  body('content').optional().isString().withMessage('Content must be a string'),
  body('status').optional().isIn(['draft', 'review', 'approved', 'published']).withMessage('Status must be draft, review, approved, or published'),
  body('qualityScore').optional().isInt({ min: 0, max: 100 }).withMessage('Quality score must be between 0 and 100'),
  body('tags').optional().isArray().withMessage('Tags must be an array'),
  body('lastModifiedBy').optional().isString().trim().isLength({ max: 100 }).withMessage('Last modified by must be 100 characters or less')
];

const validateDocumentQuery = [
  query('page').optional().isInt({ min: 1 }).withMessage('Page must be a positive integer'),
  query('limit').optional().isInt({ min: 1, max: 100 }).withMessage('Limit must be between 1 and 100'),
  query('status').optional().isIn(['draft', 'review', 'approved', 'published']).withMessage('Invalid status filter'),
  query('type').optional().isString().trim().withMessage('Type filter must be a string'),
  query('framework').optional().isIn(['babok', 'pmbok', 'multi']).withMessage('Invalid framework filter')
];

/**
 * @swagger
 * components:
 *   schemas:
 *     ProjectDocument:
 *       type: object
 *       required:
 *         - projectId
 *         - name
 *         - type
 *         - category
 *         - content
 *         - framework
 *       properties:
 *         id:
 *           type: string
 *           description: Document ID
 *         projectId:
 *           type: string
 *           description: Project ID this document belongs to
 *         name:
 *           type: string
 *           description: Document name
 *         type:
 *           type: string
 *           description: Document type
 *         category:
 *           type: string
 *           description: Document category
 *         content:
 *           type: string
 *           description: Document content
 *         status:
 *           type: string
 *           enum: [draft, review, approved, published]
 *           description: Document status
 *         version:
 *           type: string
 *           description: Document version
 *         framework:
 *           type: string
 *           enum: [babok, pmbok, multi]
 *           description: Framework used
 *         qualityScore:
 *           type: number
 *           minimum: 0
 *           maximum: 100
 *           description: Document quality score
 *         wordCount:
 *           type: number
 *           description: Word count
 *         tags:
 *           type: array
 *           items:
 *             type: string
 *           description: Document tags
 *         generatedAt:
 *           type: string
 *           format: date-time
 *           description: Generation timestamp
 *         generatedBy:
 *           type: string
 *           description: Who generated the document
 *         lastModified:
 *           type: string
 *           format: date-time
 *           description: Last modification timestamp
 *         lastModifiedBy:
 *           type: string
 *           description: Who last modified the document
 */

/**
 * @swagger
 * /api/v1/projects/{projectId}/documents:
 *   get:
 *     summary: Get all documents for a project
 *     tags: [Project Documents]
 *     parameters:
 *       - in: path
 *         name: projectId
 *         required: true
 *         schema:
 *           type: string
 *         description: Project ID
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *           default: 1
 *         description: Page number
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *           default: 10
 *         description: Documents per page
 *       - in: query
 *         name: status
 *         schema:
 *           type: string
 *           enum: [draft, review, approved, published]
 *         description: Filter by status
 *       - in: query
 *         name: type
 *         schema:
 *           type: string
 *         description: Filter by document type
 *       - in: query
 *         name: framework
 *         schema:
 *           type: string
 *           enum: [babok, pmbok, multi]
 *         description: Filter by framework
 *     responses:
 *       200:
 *         description: Documents retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/ProjectDocument'
 *                 pagination:
 *                   type: object
 *                   properties:
 *                     currentPage:
 *                       type: integer
 *                     totalPages:
 *                       type: integer
 *                     totalDocuments:
 *                       type: integer
 *                     hasNextPage:
 *                       type: boolean
 *                     hasPrevPage:
 *                       type: boolean
 *       400:
 *         description: Bad request
 *       404:
 *         description: Project not found
 *       500:
 *         description: Internal server error
 */
// More specific routes first to avoid conflicts
router.get('/:projectId/documents/deleted', validateProjectId, validateDocumentQuery, ProjectDocumentController.getDeletedDocuments);

router.get('/:projectId/documents', validateProjectId, validateDocumentQuery, ProjectDocumentController.getProjectDocuments);

/**
 * @swagger
 * /api/v1/projects/{projectId}/documents/stats:
 *   get:
 *     summary: Get document statistics for a project
 *     tags: [Project Documents]
 *     parameters:
 *       - in: path
 *         name: projectId
 *         required: true
 *         schema:
 *           type: string
 *         description: Project ID
 *     responses:
 *       200:
 *         description: Statistics retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     totalDocuments:
 *                       type: integer
 *                     avgQualityScore:
 *                       type: number
 *                     totalWordCount:
 *                       type: integer
 *                     statusBreakdown:
 *                       type: object
 *                     frameworkBreakdown:
 *                       type: array
 *                     categoryBreakdown:
 *                       type: array
 *       400:
 *         description: Bad request
 *       404:
 *         description: Project not found
 *       500:
 *         description: Internal server error
 */
router.get('/:projectId/documents/stats', validateProjectId, ProjectDocumentController.getDocumentStats);

/**
 * @swagger
 * /api/v1/projects/{projectId}/documents:
 *   post:
 *     summary: Create a new document for a project
 *     tags: [Project Documents]
 *     parameters:
 *       - in: path
 *         name: projectId
 *         required: true
 *         schema:
 *           type: string
 *         description: Project ID
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/ProjectDocument'
 *     responses:
 *       201:
 *         description: Document created successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   $ref: '#/components/schemas/ProjectDocument'
 *                 message:
 *                   type: string
 *       400:
 *         description: Bad request
 *       404:
 *         description: Project not found
 *       500:
 *         description: Internal server error
 */
router.post('/:projectId/documents', validateProjectId, validateCreateDocument, ProjectDocumentController.createDocument);

/**
 * @swagger
 * /api/v1/projects/documents/{id}:
 *   get:
 *     summary: Get a specific document by ID
 *     tags: [Project Documents]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: Document ID
 *     responses:
 *       200:
 *         description: Document retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   $ref: '#/components/schemas/ProjectDocument'
 *       400:
 *         description: Bad request
 *       404:
 *         description: Document not found
 *       500:
 *         description: Internal server error
 */
router.get('/documents/:id', validateDocumentId, ProjectDocumentController.getDocumentById);

/**
 * @swagger
 * /api/v1/projects/documents/{id}:
 *   put:
 *     summary: Update a document
 *     tags: [Project Documents]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: Document ID
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/ProjectDocument'
 *     responses:
 *       200:
 *         description: Document updated successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   $ref: '#/components/schemas/ProjectDocument'
 *                 message:
 *                   type: string
 *       400:
 *         description: Bad request
 *       404:
 *         description: Document not found
 *       500:
 *         description: Internal server error
 */
router.put('/documents/:id', validateDocumentId, validateUpdateDocument, ProjectDocumentController.updateDocument);

/**
 * @swagger
 * /api/v1/projects/documents/{id}:
 *   delete:
 *     summary: Delete a document
 *     tags: [Project Documents]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: Document ID
 *     responses:
 *       200:
 *         description: Document deleted successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *       400:
 *         description: Bad request
 *       404:
 *         description: Document not found
 *       500:
 *         description: Internal server error
 */
router.delete('/documents/:id', validateDocumentId, ProjectDocumentController.deleteDocument);

/**
 * @swagger
 * /api/v1/projects/documents/{id}/restore:
 *   put:
 *     summary: Restore a soft-deleted document
 *     tags: [Project Documents]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: Document ID
 *     responses:
 *       200:
 *         description: Document restored successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *       400:
 *         description: Bad request
 *       404:
 *         description: Document not found
 *       500:
 *         description: Internal server error
 */
router.put('/documents/:id/restore', validateDocumentId, ProjectDocumentController.restoreDocument);

/**
 * @swagger
 * /api/v1/projects/{projectId}/documents/deleted:
 *   get:
 *     summary: Get all deleted documents for a project
 *     tags: [Project Documents]
 *     parameters:
 *       - in: path
 *         name: projectId
 *         required: true
 *         schema:
 *           type: string
 *         description: Project ID
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *           default: 1
 *         description: Page number
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *           default: 10
 *         description: Documents per page
 *     responses:
 *       200:
 *         description: Deleted documents retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 documents:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/ProjectDocument'
 *                 pagination:
 *                   type: object
 *                   properties:
 *                     currentPage:
 *                       type: integer
 *                     totalPages:
 *                       type: integer
 *                     totalDocuments:
 *                       type: integer
 *                     hasNextPage:
 *                       type: boolean
 *                     hasPrevPage:
 *                       type: boolean
 *       400:
 *         description: Bad request
 *       404:
 *         description: Project not found
 *       500:
 *         description: Internal server error
 */
export default router;
