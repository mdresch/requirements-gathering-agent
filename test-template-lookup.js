/**
 * Test Database-First Template Lookup
 * 
 * This test verifies that the system can find existing templates
 * and use them for document generation.
 */

import mongoose from 'mongoose';

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/requirements-gathering-agent';

async function testTemplateLookup() {
  console.log('üß™ Testing Database-First Template Lookup');
  console.log('==========================================');
  
  try {
    // Connect to MongoDB
    console.log('üì° Connecting to MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connected to MongoDB');
    
    // Import TemplateModel
    const { TemplateModel } = await import('./src/models/Template.model.js');
    
    // Check what templates exist
    console.log('\nüìã Checking existing templates...');
    const allTemplates = await TemplateModel.find({ is_deleted: false }).select('name documentKey category template_type is_active');
    
    if (allTemplates.length === 0) {
      console.log('‚ùå No templates found in database');
      console.log('üí° The system needs templates to work properly');
      return;
    }
    
    console.log(`‚úÖ Found ${allTemplates.length} templates:`);
    allTemplates.forEach((template, index) => {
      console.log(`   ${index + 1}. ${template.name}`);
      console.log(`      - Document Key: "${template.documentKey}"`);
      console.log(`      - Category: ${template.category}`);
      console.log(`      - Type: ${template.template_type}`);
      console.log(`      - Active: ${template.is_active}`);
      console.log('');
    });
    
    // Test the DatabaseFirstProcessorFactory
    console.log('üîß Testing DatabaseFirstProcessorFactory...');
    const { createDatabaseFirstProcessor } = await import('./src/modules/documentGenerator/DatabaseFirstProcessorFactory.js');
    
    // Test with different document keys
    const testKeys = [
      'stakeholder-analysis',
      'business-case',
      'project-charter',
      'requirements-documentation'
    ];
    
    for (const testKey of testKeys) {
      console.log(`\nüîç Testing lookup for key: "${testKey}"`);
      try {
        const processor = await createDatabaseFirstProcessor(testKey);
        console.log(`‚úÖ Successfully created processor for "${testKey}"`);
        
        // Test processing with sample context
        const testContext = {
          projectName: 'Test Project',
          projectId: 'test-123',
          description: 'This is a test project',
          projectType: 'Test Project'
        };
        
        console.log(`üöÄ Testing document generation for "${testKey}"...`);
        const output = await processor.process(testContext);
        
        console.log(`‚úÖ Document generated successfully:`);
        console.log(`   - Title: ${output.title}`);
        console.log(`   - Content Length: ${output.content.length} characters`);
        console.log(`   - Content Preview: ${output.content.substring(0, 200)}...`);
        
        // Check if content looks like it was generated by AI
        if (output.content.includes('Stakeholder Analysis') || 
            output.content.includes('Executive Summary') ||
            output.content.includes('## ')) {
          console.log(`‚úÖ Content appears to be AI-generated with proper structure`);
        } else {
          console.log(`‚ö†Ô∏è Content may not be properly AI-generated`);
        }
        
      } catch (error) {
        console.log(`‚ùå Failed to create processor for "${testKey}": ${error.message}`);
      }
    }
    
    console.log('\nüéâ Template Lookup Test Completed!');
    console.log('==================================');
    console.log('‚úÖ The system can find and use existing templates');
    console.log('‚úÖ Database-first generation is working properly');
    console.log('‚úÖ AI processing uses template content and instructions');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üì° Disconnected from MongoDB');
  }
}

// Run the test
testTemplateLookup().catch(console.error);
